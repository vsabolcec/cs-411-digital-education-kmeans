import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# sns.set_theme()

data1 = [(2.51, 5.79), (2.6, 3.16), (2.3, 5.04), (2.64, 5.04), (2.42, 4.22), (2.18, 5.18), (2.37, 3.54), (2.62, 5.56), (2.57, 5.51), (2.27, 5.3), (2.62, 7.48), (2.48, 5.35), (2.59, 5.07), (2.57, 4.27), (2.27, 5.3), (2.57, 4.04), (2.38, 6.27), (2.81, 4.35), (2.64, 5.16), (2.51, 6.99), (2.3, 6.16), (2.51, 5.24), (2.53, 6.38), (2.26, 4.95), (2.94, 5.8), (2.58, 5.02), (2.84, 4.09), (2.28, 5.43), (2.83, 5.93), (2.23, 4.65), (2.37, 3.9), (2.61, 4.47), (2.51, 2.62), (2.03, 4.39), (2.28, 3.92), (2.67, 7.02), (2.92, 4.44), (2.68, 3.46), (2.44, 5.87), (2.66, 4.82), (2.27, 5.05), (2.6, 5.19), (2.23, 5.21), (2.5, 4.63), (2.47, 5.95), (2.66, 5.52), (2.44, 4.5), (2.74, 4.83), (2.46, 4.06), (2.67, 5.28), (1.15, 7.11), (1.13, 7.21), (1.12, 6.49), (0.97, 8.01), (1.32, 8.53), (0.96, 6.41), (1.01, 7.76), (0.93, 6.67), (1.02, 6.83), (0.95, 7.18), (1.41, 6.6), (1.09, 7.9), (0.66, 5.5), (0.91, 6.3), (0.72, 6.88), (1.18, 5.96), (1.27, 7.36), (0.91, 5.49), (1.12, 7.06), (0.96, 5.56), (1.08, 6.85), (1.35, 7.51), (0.93, 9.2), (0.75, 8.08), (1.14, 8.62), (1.1, 7.07), (1.13, 9.12), (1.21, 6.76), (0.86, 6.75), (0.61, 5.72), (1.21, 7.22), (0.92, 8.05), (0.76, 6.37), (0.77, 6.63), (1.23, 6.54), (1.04, 6.67), (1.06, 6.41), (1.17, 5.65), (0.86, 8.38), (0.77, 5.03), (0.83, 6.07), (0.78, 7.34), (0.94, 8.01), (0.82, 6.79), (1.01, 6.72), (0.9, 7.05), (0.98, 6.74), (1.13, 7.88), (1.28, 6.52), (1.31, 6.01), (1.91, 10.13), (2.02, 11.87), (2.25, 10.06), (2.32, 9.57), (1.92, 8.77), (1.71, 10.77), (1.72, 9.25), (2.43, 9.89), (1.92, 10.71), (2.09, 10.05), (2.38, 9.61), (1.86, 9.83), (1.96, 10.9), (1.88, 9.98), (1.78, 10.24), (2.16, 10.42), (2.21, 9.67), (1.63, 10.33), (2.2, 9.72), (1.95, 11.13), (2.04, 10.5), (2.04, 8.27), (1.74, 9.79), (1.94, 11.11), (1.8, 9.79), (2.38, 9.58), (2.44, 10.99), (2.02, 8.92), (1.76, 10.07), (2.23, 10.59), (1.96, 10.85), (2.35, 8.97), (2.39, 8.75), (2.33, 11.49), (1.92, 9.22), (1.8, 9.91), (1.87, 12.43), (1.98, 9.53), (1.82, 7.8), (2.24, 12.79), (2.13, 11.01), (1.99, 10.36), (1.92, 12.78), (2.13, 9.92), (2.28, 11.45), (1.61, 10.01), (2.05, 9.72), (1.94, 10.63), (1.85, 10.88), (1.93, 11.28)]
data2 = [(2.67, 1.5), (2.47, 1.53), (2.45, 1.56), (2.23, 1.57), (2.49, 1.63), (2.46, 1.65), (2.43, 1.68), (2.51, 1.73), (2.51, 1.76), (2.36, 1.75), (2.37, 1.78), (2.4, 1.82), (2.49, 1.9), (2.47, 1.92), (2.29, 1.87), (2.29, 1.91), (2.44, 2.02), (2.49, 2.09), (2.34, 2.04), (2.27, 2.03), (2.4, 2.16), (2.26, 2.1), (2.32, 2.19), (2.36, 2.27), (2.27, 2.23), (2.21, 2.22), (2.23, 2.29), (2.12, 2.2), (2.12, 2.26), (2.07, 2.25), (2.07, 2.3), (2.03, 2.29), (2.02, 2.33), (1.99, 2.33), (1.98, 2.39), (1.95, 2.4), (1.93, 2.43), (1.95, 2.55), (1.81, 2.29), (1.88, 2.57), (1.8, 2.43), (1.74, 2.34), (1.74, 2.45), (1.71, 2.49), (1.7, 2.59), (1.63, 2.38), (1.62, 2.51), (1.59, 2.51), (1.55, 2.33), (1.52, 2.38), (1.49, 2.56), (1.46, 2.57), (1.42, 2.61), (1.39, 2.55), (1.36, 2.53), (1.33, 2.5), (1.28, 2.6), (1.29, 2.39), (1.25, 2.45), (1.2, 2.49), (1.23, 2.3), (1.11, 2.56), (1.15, 2.35), (1.1, 2.41), (0.97, 2.59), (1.08, 2.31), (1.04, 2.33), (0.9, 2.49), (1.01, 2.25), (0.95, 2.29), (0.87, 2.34), (0.85, 2.32), (0.82, 2.31), (0.81, 2.27), (0.71, 2.32), (0.71, 2.27), (0.72, 2.22), (0.79, 2.11), (0.78, 2.08), (0.85, 1.99), (0.63, 2.12), (0.82, 1.95), (0.57, 2.07), (0.47, 2.09), (0.71, 1.92), (0.66, 1.91), (0.63, 1.89), (0.5, 1.92), (0.65, 1.82), (0.57, 1.82), (0.59, 1.78), (0.56, 1.76), (0.4, 1.76), (0.62, 1.68), (0.51, 1.67), (0.48, 1.65), (0.42, 1.62), (0.63, 1.57), (0.39, 1.55), (0.46, 1.52), (0.41, 1.48), (0.49, 1.45), (0.67, 1.43), (0.57, 1.4), (0.43, 1.35), (0.51, 1.33), (0.53, 1.3), (0.35, 1.22), (0.32, 1.18), (0.55, 1.21), (0.37, 1.11), (0.75, 1.22), (0.77, 1.19), (0.51, 1.05), (0.63, 1.07), (0.57, 1.0), (0.59, 0.98), (0.66, 0.98), (0.61, 0.91), (0.67, 0.91), (0.82, 0.99), (0.7, 0.86), (0.73, 0.84), (0.63, 0.7), (0.87, 0.88), (0.81, 0.78), (0.86, 0.79), (0.86, 0.75), (0.78, 0.59), (0.88, 0.67), (0.96, 0.72), (0.95, 0.65), (0.94, 0.58), (1.06, 0.72), (1.05, 0.64), (1.0, 0.46), (1.06, 0.51), (1.12, 0.58), (1.17, 0.61), (1.19, 0.57), (1.26, 0.69), (1.22, 0.44), (1.27, 0.49), (1.3, 0.51), (1.36, 0.64), (1.38, 0.58), (1.39, 0.45), (1.43, 0.48), (1.46, 0.55), (1.49, 0.45), (1.53, 0.41), (1.55, 0.57), (1.58, 0.56), (1.61, 0.59), (1.63, 0.63), (1.69, 0.44), (1.72, 0.47), (1.75, 0.5), (1.74, 0.65), (1.77, 0.65), (1.83, 0.56), (1.85, 0.61), (1.9, 0.57), (1.89, 0.66), (1.98, 0.55), (2.06, 0.46), (2.08, 0.5), (2.12, 0.52), (2.06, 0.66), (2.14, 0.61), (2.09, 0.74), (2.19, 0.66), (2.13, 0.78), (2.15, 0.8), (2.16, 0.84), (2.28, 0.76), (2.27, 0.82), (2.28, 0.85), (2.2, 0.95), (2.32, 0.9), (2.21, 1.02), (2.47, 0.88), (2.35, 1.0), (2.39, 1.01), (2.38, 1.05), (2.26, 1.14), (2.29, 1.16), (2.43, 1.13), (2.58, 1.11), (2.34, 1.22), (2.39, 1.24), (2.46, 1.25), (2.31, 1.32), (2.32, 1.34), (2.45, 1.35), (2.49, 1.37), (2.46, 1.41), (2.65, 1.43), (2.48, 1.47), (2.54, 1.5), (1.82, 1.5), (1.84, 1.54), (1.19, 1.42), (1.43, 1.47), (1.7, 1.61), (1.28, 1.34), (1.37, 1.37), (1.34, 1.3), (1.36, 1.27), (1.41, 1.29), (1.51, 1.53), (1.54, 1.75), (1.51, 1.81), (1.5, 1.5), (1.59, 1.12), (1.5, 1.49), (1.53, 1.44), (1.46, 1.56), (1.52, 1.48), (1.77, 1.27), (1.43, 1.55), (1.87, 1.32), (1.63, 1.46), (1.44, 1.51), (1.43, 1.5), (1.19, 1.48), (1.96, 1.59), (1.44, 1.48), (1.38, 1.44), (1.55, 1.54), (1.4, 1.42), (1.65, 1.66), (1.42, 1.39), (1.45, 1.4), (1.57, 1.68), (1.53, 1.63), (1.5, 1.54), (1.5, 1.63), (1.53, 1.29), (1.51, 1.47), (1.61, 1.26), (1.62, 1.3), (1.51, 1.49), (1.47, 1.53), (1.35, 1.61), (1.36, 1.58), (1.35, 1.56), (1.57, 1.48), (1.32, 1.52), (1.52, 1.5)]
data3 = [(2.72, 5.14), (2.85, 5.01), (2.4, 5.1), (2.91, 5.1), (2.57, 5.06), (2.22, 5.11), (2.51, 5.03), (2.88, 5.13), (2.8, 5.13), (2.36, 5.12), (2.89, 5.22), (2.67, 5.12), (2.83, 5.1), (2.8, 5.06), (2.35, 5.11), (2.81, 5.05), (2.52, 5.16), (3.16, 5.07), (2.92, 5.11), (2.71, 5.2), (2.41, 5.16), (2.72, 5.11), (2.75, 5.17), (2.34, 5.1), (3.37, 5.14), (2.82, 5.1), (3.21, 5.05), (2.37, 5.12), (3.19, 5.15), (2.29, 5.08), (2.5, 5.05), (2.86, 5.07), (2.71, 4.98), (1.99, 5.07), (2.37, 5.05), (2.95, 5.2), (3.33, 5.07), (2.97, 5.02), (2.62, 5.14), (2.94, 5.09), (2.36, 5.1), (2.85, 5.11), (2.3, 5.11), (2.7, 5.08), (2.66, 5.15), (2.94, 5.13), (2.61, 5.08), (3.06, 5.09), (2.64, 5.05), (2.95, 5.11), (1.04, 5.06), (1.03, 5.11), (1.03, 4.75), (0.99, 5.5), (1.08, 5.77), (0.99, 4.7), (1.0, 5.38), (0.98, 4.84), (1.0, 4.91), (0.99, 5.09), (1.1, 4.8), (1.02, 5.45), (0.92, 4.25), (0.98, 4.65), (0.93, 4.94), (1.04, 4.48), (1.07, 5.18), (0.98, 4.24), (1.03, 5.03), (0.99, 4.28), (1.02, 4.93), (1.09, 5.25), (0.98, 6.1), (0.94, 5.54), (1.04, 5.81), (1.03, 5.03), (1.03, 6.06), (1.05, 4.88), (0.97, 4.87), (0.9, 4.36), (1.05, 5.11), (0.98, 5.53), (0.94, 4.68), (0.94, 4.81), (1.06, 4.77), (1.01, 4.83), (1.02, 4.7), (1.04, 4.32), (0.97, 5.69), (0.94, 4.01), (0.96, 4.54), (0.94, 5.17), (0.99, 5.51), (0.96, 4.9), (1.0, 4.86), (0.98, 5.02), (1.0, 4.87), (1.03, 5.44), (1.07, 4.76), (1.08, 4.51), (1.86, 5.51), (2.03, 5.59), (2.37, 5.5), (2.48, 5.48), (1.88, 5.44), (1.56, 5.54), (1.58, 5.46), (2.64, 5.49), (1.88, 5.54), (2.14, 5.5), (2.58, 5.48), (1.8, 5.49), (1.94, 5.54), (1.83, 5.5), (1.67, 5.51), (2.24, 5.52), (2.32, 5.48), (1.44, 5.52), (2.29, 5.49), (1.93, 5.56), (2.06, 5.53), (2.06, 5.41), (1.61, 5.49), (1.91, 5.56), (1.7, 5.49), (2.57, 5.48), (2.66, 5.55), (2.03, 5.45), (1.65, 5.5), (2.35, 5.53), (1.94, 5.54), (2.52, 5.45), (2.59, 5.44), (2.5, 5.57), (1.88, 5.46), (1.7, 5.5), (1.8, 5.62), (1.97, 5.48), (1.72, 5.39), (2.36, 5.64), (2.2, 5.55), (1.99, 5.52), (1.88, 5.64), (2.19, 5.5), (2.41, 5.57), (1.42, 5.5), (2.07, 5.49), (1.91, 5.53), (1.78, 5.54), (1.9, 5.56)]

def plot(ax, data, clusters = None, num_clusters = None):
  """
  Arguments:
    data: list of shape (N, 2)
    clusters: list of shape (N) with 0 to M-1 as clusters of each datapoint
  """
  assert clusters is None or (len(data) == len(clusters) and num_clusters is not None), "There must be the same number of assignments to clusters as there are datapoints."

  data = np.array(data)
  ax.scatter(data[: , 0], data[:, 1], c='gray')

  if clusters is not None:
    clusters = np.array(clusters)
    for i in range(num_clusters):
      ax.scatter(data[clusters == i, 0], data[clusters == i, 1], label=f"Cluster {i}")
    ax.legend()
  ax.set_xlabel("Distance to shop (km)")
  ax.set_ylabel("Average spendings (CHF)")

def visualize_data(data):
  fig, ax = plt.subplots(figsize=(6, 4))
  plot(ax, data)
  plt.show()

def visualize_clusters(data, clusters, num_clusters):
  fig, ax = plt.subplots(figsize=(6, 4))
  plot(ax, data, clusters, num_clusters)
  plt.show()

def visualize_other_data(datalist):
  fig, axs = plt.subplots(1, len(datalist), figsize=(5 * len(datalist), 4))
  for i in range(len(datalist)):
    plot(axs[i], datalist[i])
    axs[i].set_title(f"Shop {i + 1}")

def visualize_other_clusters(datalist, cluster_list, num_clusters_list):
  fig, axs = plt.subplots(1, len(datalist), figsize=(5 * len(datalist), 4))
  for i in range(len(datalist)):
    plot(axs[i], datalist[i], cluster_list[i], num_clusters_list[i])
    axs[i].set_title(f"Shop {i + 1}")
    # axs[i].legend([f'Cluster {nc + 1}' for nc in range(num_cluster_list[i])])

